"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = __importStar(require("assert"));
const list_1 = require("./list");
// Note: the tests provided here exceed the minimum number required by our
// course guidelines
describe('list', function () {
    it('len', function () {
        assert.deepStrictEqual((0, list_1.len)(list_1.nil), 0n);
        assert.deepStrictEqual((0, list_1.len)((0, list_1.cons)(1n, list_1.nil)), 1n);
        assert.deepStrictEqual((0, list_1.len)((0, list_1.cons)(2n, list_1.nil)), 1n);
        assert.deepStrictEqual((0, list_1.len)((0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil))), 2n);
        assert.deepStrictEqual((0, list_1.len)((0, list_1.cons)(3n, (0, list_1.cons)(2n, (0, list_1.cons)(1n, (0, list_1.cons)(0n, list_1.nil))))), 4n);
    });
    it('equal', function () {
        assert.deepStrictEqual((0, list_1.equal)(list_1.nil, list_1.nil), true);
        assert.deepStrictEqual((0, list_1.equal)(list_1.nil, (0, list_1.cons)(1n, list_1.nil)), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(1n, list_1.nil), list_1.nil), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil)), list_1.nil), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(1n, list_1.nil), (0, list_1.cons)(2n, list_1.nil)), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(7n, list_1.nil), (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil))), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(3n, list_1.nil), (0, list_1.cons)(3n, list_1.nil)), true);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(5n, list_1.nil), (0, list_1.cons)(5n, (0, list_1.cons)(1n, list_1.nil))), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(4n, (0, list_1.cons)(1n, list_1.nil)), (0, list_1.cons)(4n, list_1.nil)), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(6n, (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil))), (0, list_1.cons)(6n, list_1.nil)), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(5n, (0, list_1.cons)(1n, list_1.nil)), (0, list_1.cons)(5n, (0, list_1.cons)(2n, list_1.nil))), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(9n, (0, list_1.cons)(3n, list_1.nil)), (0, list_1.cons)(9n, (0, list_1.cons)(4n, (0, list_1.cons)(2n, list_1.nil)))), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(4n, (0, list_1.cons)(3n, list_1.nil)), (0, list_1.cons)(4n, (0, list_1.cons)(3n, list_1.nil))), true);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(7n, (0, list_1.cons)(6n, (0, list_1.cons)(1n, (0, list_1.cons)(4n, list_1.nil)))), (0, list_1.cons)(7n, (0, list_1.cons)(6n, (0, list_1.cons)(1n, (0, list_1.cons)(4n, list_1.nil))))), true);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(4n, (0, list_1.cons)(3n, (0, list_1.cons)(2n, list_1.nil))), (0, list_1.cons)(4n, (0, list_1.cons)(3n, (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil))))), false);
    });
    it('concat', function () {
        assert.deepStrictEqual((0, list_1.concat)(list_1.nil, list_1.nil), list_1.nil);
        assert.deepStrictEqual((0, list_1.concat)(list_1.nil, (0, list_1.cons)(1n, list_1.nil)), (0, list_1.cons)(1n, list_1.nil));
        assert.deepStrictEqual((0, list_1.concat)(list_1.nil, (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil))), (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil)));
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1n, list_1.nil), list_1.nil), (0, list_1.cons)(1n, list_1.nil));
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1n, list_1.nil), (0, list_1.cons)(2n, list_1.nil)), (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil)));
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1n, list_1.nil), (0, list_1.cons)(2n, (0, list_1.cons)(3n, list_1.nil))), (0, list_1.cons)(1n, (0, list_1.cons)(2n, (0, list_1.cons)(3n, list_1.nil))));
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil)), list_1.nil), (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil)));
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil)), (0, list_1.cons)(3n, list_1.nil)), (0, list_1.cons)(1n, (0, list_1.cons)(2n, (0, list_1.cons)(3n, list_1.nil))));
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil)), (0, list_1.cons)(3n, (0, list_1.cons)(4n, list_1.nil))), (0, list_1.cons)(1n, (0, list_1.cons)(2n, (0, list_1.cons)(3n, (0, list_1.cons)(4n, list_1.nil)))));
    });
    it('rev', function () {
        assert.deepStrictEqual((0, list_1.rev)(list_1.nil), list_1.nil);
        assert.deepStrictEqual((0, list_1.rev)((0, list_1.cons)(1n, list_1.nil)), (0, list_1.cons)(1n, list_1.nil));
        assert.deepStrictEqual((0, list_1.rev)((0, list_1.cons)(2n, list_1.nil)), (0, list_1.cons)(2n, list_1.nil));
        assert.deepStrictEqual((0, list_1.rev)((0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil))), (0, list_1.cons)(2n, (0, list_1.cons)(1n, list_1.nil)));
        assert.deepStrictEqual((0, list_1.rev)((0, list_1.cons)(1n, (0, list_1.cons)(2n, (0, list_1.cons)(3n, list_1.nil)))), (0, list_1.cons)(3n, (0, list_1.cons)(2n, (0, list_1.cons)(1n, list_1.nil))));
    });
    it('at', function () {
        const L0 = list_1.nil;
        const L1 = (0, list_1.cons)(5n, list_1.nil);
        const L2 = (0, list_1.cons)(4n, (0, list_1.cons)(5n, list_1.nil));
        const L3 = (0, list_1.cons)(1n, (0, list_1.cons)(2n, (0, list_1.cons)(3n, list_1.nil)));
        const L4 = (0, list_1.cons)(9n, (0, list_1.cons)(8n, (0, list_1.cons)(7n, (0, list_1.cons)(6n, list_1.nil))));
        assert.throws(() => (0, list_1.at)(-1n, L0));
        assert.throws(() => (0, list_1.at)(0n, L0));
        assert.throws(() => (0, list_1.at)(-1n, L1));
        assert.throws(() => (0, list_1.at)(1n, L1));
        assert.deepStrictEqual((0, list_1.at)(0n, L1), 5n);
        assert.deepStrictEqual((0, list_1.at)(0n, L3), 1n);
        assert.throws(() => (0, list_1.at)(1n, L0));
        assert.throws(() => (0, list_1.at)(1n, (0, list_1.cons)(7n, list_1.nil)));
        assert.deepStrictEqual((0, list_1.at)(1n, L2), 5n);
        assert.deepStrictEqual((0, list_1.at)(1n, L3), 2n);
        assert.deepStrictEqual((0, list_1.at)(2n, L3), 3n);
        assert.deepStrictEqual((0, list_1.at)(2n, L4), 7n);
        assert.deepStrictEqual((0, list_1.at)(3n, L4), 6n);
        assert.throws(() => (0, list_1.at)(3n, L3));
        assert.throws(() => (0, list_1.at)(4n, L4));
    });
    it('prefix', function () {
        const l5 = (0, list_1.cons)(1n, (0, list_1.cons)(2n, (0, list_1.cons)(3n, (0, list_1.cons)(4n, (0, list_1.cons)(5n, list_1.nil)))));
        assert.deepStrictEqual((0, list_1.prefix)(0n, list_1.nil), list_1.nil);
        assert.deepStrictEqual((0, list_1.prefix)(0n, (0, list_1.cons)(3n, list_1.nil)), list_1.nil);
        assert.deepStrictEqual((0, list_1.prefix)(1n, (0, list_1.cons)(3n, list_1.nil)), (0, list_1.cons)(3n, list_1.nil));
        assert.deepStrictEqual((0, list_1.prefix)(1n, l5), (0, list_1.cons)(1n, list_1.nil));
        assert.deepStrictEqual((0, list_1.prefix)(2n, l5), (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil)));
        assert.deepStrictEqual((0, list_1.prefix)(4n, l5), (0, list_1.cons)(1n, (0, list_1.cons)(2n, (0, list_1.cons)(3n, (0, list_1.cons)(4n, list_1.nil)))));
        assert.deepStrictEqual((0, list_1.prefix)(5n, l5), l5);
        // Error case branch: not enough elements for prefix
        assert.throws(() => (0, list_1.prefix)(6n, l5), Error);
        assert.throws(() => (0, list_1.prefix)(1n, list_1.nil), Error);
    });
    it('compact_list', function () {
        assert.deepStrictEqual((0, list_1.compact_list)(list_1.nil), []);
        assert.deepStrictEqual((0, list_1.compact_list)((0, list_1.cons)(1n, list_1.nil)), [1n]);
        assert.deepStrictEqual((0, list_1.compact_list)((0, list_1.cons)(8n, list_1.nil)), [8n]);
        assert.deepStrictEqual((0, list_1.compact_list)((0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil))), [1n, 2n]);
        assert.deepStrictEqual((0, list_1.compact_list)((0, list_1.cons)(3n, (0, list_1.cons)(2n, (0, list_1.cons)(1n, list_1.nil)))), [3n, 2n, 1n]);
    });
    it('remove', function () {
        assert.deepStrictEqual((0, list_1.remove)(1n, list_1.nil), list_1.nil);
        assert.deepStrictEqual((0, list_1.remove)(2n, list_1.nil), list_1.nil);
        assert.deepStrictEqual((0, list_1.remove)(1n, (0, list_1.cons)(1n, list_1.nil)), list_1.nil);
        assert.deepStrictEqual((0, list_1.remove)(1n, (0, list_1.cons)(2n, list_1.nil)), (0, list_1.cons)(2n, list_1.nil));
        assert.deepStrictEqual((0, list_1.remove)(2n, (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil))), (0, list_1.cons)(1n, list_1.nil));
        assert.deepStrictEqual((0, list_1.remove)(1n, (0, list_1.cons)(1n, (0, list_1.cons)(2n, (0, list_1.cons)(3n, list_1.nil)))), (0, list_1.cons)(2n, (0, list_1.cons)(3n, list_1.nil)));
    });
});
//# sourceMappingURL=data:application/json;base64,